"""
Django settings for server project.
Generated by "django-admin startproject" using Django 4.0.6.
For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# For using environment variables in .env 
import os


# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
# (dev) SECRET_KEY = "django-insecure-!a$-ew^rcsu-0-(d$-$guw2w9)-6f%h%4ohbdwu+3e6=7!_wb3"

# Generate secret key and store in environment variable for production 
SECRET_KEY = os.environ.get("SECRET_KEY")


# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = str(os.environ.get("ALLOWED_HOSTS")).split(",")

# Application definition

INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "spotify",
    "django.contrib.gis", # GeoDjango for PostGIS
    "rest_framework", # Django REST Framework for endpoints
    "rest_framework_gis", # GIS extension of REST Framework for GeoJSON payloads
    "corsheaders", #Allows Vue to make API requests
    "vjusers", # Virtual Jukebox users
    "vjsessions", # Virtual Jukebox sessions
    "vjsocket",
    "django_crontab"
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"
ASGI_APPLICATION = "server.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis://:" + os.environ.get("REDIS_PASSWORD") + "@redis:6379")],
        },
    },
}
# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("POSTGRES_NAME"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": "5432",
    }
}

# Cache
# https://docs.djangoproject.com/en/4.0/topics/cache/

CACHES = {
    "default": { # Actual cache
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://:" + os.environ.get("REDIS_PASSWORD") + "@redis:6379",
        "TIMEOUT": None,
    }
}

# Logging
# https://docs.djangoproject.com/en/4.0/topics/logging/

# Create logs directory if does not exist
log_dir = "./logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "loggers": {
        "django": { # Write to production.log only if not in Django DEBUG mode
            "handlers": ["console", "file_debug", "file_console"] if DEBUG else ["console", "file_production"],
            "level": "DEBUG" if DEBUG else "INFO",
        },
        "cron": {
            "handlers": ["cron"],
            "level": "INFO",
        }
    },
    "handlers": {
        "console": { # Console logs
            "level": os.environ.get("LOG_LEVEL_CONSOLE", "INFO"),
            "class": "logging.StreamHandler",
        },
        "file_console": { # Log file for mimicking console (debug mode only)
            "level": os.environ.get("LOG_LEVEL_CONSOLE", "INFO"),
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "./logs/console.log",
            "backupCount": 3,
            "maxBytes": 5242880, # 5 MB
            "formatter": "standard",
        },
        "file_debug": { # Log file for debugging (verbose)
            "level": os.environ.get("LOG_LEVEL_DEBUG", "DEBUG"),
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "./logs/debug.log",
            "backupCount": 3,
            "maxBytes": 5242880, # 5 MB
            "formatter": "standard",
        },
        "file_production": { # Log file for production
            "level": os.environ.get("LOG_LEVEL_PRODUCTION", "WARNING"),
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "./logs/production.log",
            "backupCount": 3,
            "maxBytes": 5242880, # 5 MB
            "formatter": "standard",
        },
        "cron": { # Cron file for logging
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "/vjserver/logs/cron.log",
            "backupCount": 3,
            "maxBytes": 5242880, # 5 MB
            "formatter": "standard",
        }
    },
    "formatters": {
        "standard": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        }
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#CORS Settings
CORS_ALLOWED_ORIGINS = [
    #Allow these hosts to access backend APIs
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:8080",
    "http://127.0.0.1:8080",
    "https://labs2.amristar.com"
]

CRONJOBS = [
    # Run clearInactiveUsers every hour (minute 0).
    ("0 * * * * export REDIS_PASSWORD=" + str(os.environ.get("REDIS_PASSWORD")) +
        "; export POSTGRES_USER=" + str(os.environ.get("POSTGRES_USER")) + 
        "; export POSTGRES_NAME=" + str(os.environ.get("POSTGRES_NAME")) + 
        "; export POSTGRES_PASSWORD=" + str(os.environ.get("POSTGRES_PASSWORD")) + 
        "; export POSTGRES_HOST=" + str(os.environ.get("POSTGRES_HOST")) + ";",
        "vjusers.cron.clearInactiveUsers"),

        # Run clearInactiveSessions every minute.
    ("* * * * * export REDIS_PASSWORD=" + str(os.environ.get("REDIS_PASSWORD")) +
        "; export POSTGRES_USER=" + str(os.environ.get("POSTGRES_USER")) + 
        "; export POSTGRES_NAME=" + str(os.environ.get("POSTGRES_NAME")) + 
        "; export POSTGRES_PASSWORD=" + str(os.environ.get("POSTGRES_PASSWORD")) + 
        "; export POSTGRES_HOST=" + str(os.environ.get("POSTGRES_HOST")) + ";",
        "vjsessions.cron.clearInactiveSessions"),
]